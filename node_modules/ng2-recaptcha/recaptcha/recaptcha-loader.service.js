"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
exports.RECAPTCHA_LANGUAGE = new core_1.OpaqueToken('recaptcha-language');
var RecaptchaLoaderService = RecaptchaLoaderService_1 = (function () {
    function RecaptchaLoaderService(language) {
        this.language = language;
        this.init();
        this.ready = RecaptchaLoaderService_1.ready.asObservable();
    }
    /** @internal */
    RecaptchaLoaderService.prototype.init = function () {
        if (RecaptchaLoaderService_1.ready) {
            return;
        }
        window.ng2recaptchaloaded = function () {
            RecaptchaLoaderService_1.ready.next(grecaptcha);
        };
        RecaptchaLoaderService_1.ready = new BehaviorSubject_1.BehaviorSubject(null);
        var script = document.createElement('script');
        script.innerHTML = '';
        var langParam = this.language ? '&hl=' + this.language : '';
        script.src = "https://www.google.com/recaptcha/api.js?render=explicit&onload=ng2recaptchaloaded" + langParam;
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);
    };
    return RecaptchaLoaderService;
}());
RecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Optional()), __param(0, core_1.Inject(exports.RECAPTCHA_LANGUAGE)),
    __metadata("design:paramtypes", [String])
], RecaptchaLoaderService);
exports.RecaptchaLoaderService = RecaptchaLoaderService;
var RecaptchaLoaderService_1;
