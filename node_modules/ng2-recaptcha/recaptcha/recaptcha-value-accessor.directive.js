"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var recaptcha_component_1 = require("./recaptcha.component");
var RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = (function () {
    function RecaptchaValueAccessorDirective(host) {
        this.host = host;
    }
    RecaptchaValueAccessorDirective.prototype.writeValue = function (value) {
        if (!value) {
            this.host.reset();
        }
    };
    RecaptchaValueAccessorDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    RecaptchaValueAccessorDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    RecaptchaValueAccessorDirective.prototype.onResolve = function ($event) {
        if (this.onChange) {
            this.onChange($event);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    };
    return RecaptchaValueAccessorDirective;
}());
__decorate([
    core_1.HostListener('resolved', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], RecaptchaValueAccessorDirective.prototype, "onResolve", null);
RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = __decorate([
    core_1.Directive({
        providers: [
            {
                multi: true,
                provide: forms_1.NG_VALUE_ACCESSOR,
                // tslint:disable-next-line:no-forward-ref
                useExisting: core_1.forwardRef(function () { return RecaptchaValueAccessorDirective_1; }),
            },
        ],
        selector: 'recaptcha',
    }),
    __metadata("design:paramtypes", [recaptcha_component_1.RecaptchaComponent])
], RecaptchaValueAccessorDirective);
exports.RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective;
var RecaptchaValueAccessorDirective_1;
