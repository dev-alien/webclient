"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var RenderRecaptchaDirective = (function () {
    function RenderRecaptchaDirective() {
        this.onCaptchaComplete = new core_1.EventEmitter();
        this.siteKey = null;
        this.captchaStyle = null;
        this.renderDelay = 0;
        this.recaptchaId = null;
        this.recaptchaRenderElement = null;
    }
    RenderRecaptchaDirective.prototype.ngOnInit = function () {
        var _this = this;
        setTimeout(function () {
            var recaptchaStyle = _this.buildRecaptchaProperties();
            var recaptchaElement = document.getElementById(_this.recaptchaId);
            _this.recaptchaRenderElement = grecaptcha.render(recaptchaElement, recaptchaStyle);
        }, this.renderDelay);
    };
    ;
    RenderRecaptchaDirective.prototype.resetRecaptcha = function () {
        this.onRecaptchaExpired();
    };
    RenderRecaptchaDirective.prototype.buildRecaptchaProperties = function () {
        var _this = this;
        var recaptchaProperties = {};
        recaptchaProperties['sitekey'] = this.siteKey;
        recaptchaProperties['callback'] = function (data) { return _this.onCaptchaComplete.emit(data); };
        recaptchaProperties['expired-callback'] = function () { return _this.onRecaptchaExpired(); };
        if (this.captchaStyle !== null) {
            if (this.captchaStyle.theme != null) {
                recaptchaProperties['theme'] = this.captchaStyle.theme;
            }
            if (this.captchaStyle.type != null) {
                recaptchaProperties['type'] = this.captchaStyle.type;
            }
            if (this.captchaStyle.size != null) {
                recaptchaProperties['size'] = this.captchaStyle.size;
            }
            if (this.captchaStyle.tabindex != null) {
                recaptchaProperties['tabindex'] = this.captchaStyle.tabindex;
            }
        }
        return recaptchaProperties;
    };
    RenderRecaptchaDirective.prototype.onRecaptchaExpired = function () {
        if (this.recaptchaRenderElement === null) {
            return;
        }
        grecaptcha.reset(this.recaptchaRenderElement);
        this.onCaptchaComplete.emit(null);
    };
    __decorate([
        core_1.Output('onCaptchaComplete'), 
        __metadata('design:type', core_1.EventEmitter)
    ], RenderRecaptchaDirective.prototype, "onCaptchaComplete", void 0);
    __decorate([
        core_1.Input('siteKey'), 
        __metadata('design:type', String)
    ], RenderRecaptchaDirective.prototype, "siteKey", void 0);
    __decorate([
        core_1.Input('captchaStyle'), 
        __metadata('design:type', Object)
    ], RenderRecaptchaDirective.prototype, "captchaStyle", void 0);
    __decorate([
        core_1.Input('renderDelay'), 
        __metadata('design:type', Number)
    ], RenderRecaptchaDirective.prototype, "renderDelay", void 0);
    __decorate([
        core_1.Input('recaptchaId'), 
        __metadata('design:type', String)
    ], RenderRecaptchaDirective.prototype, "recaptchaId", void 0);
    RenderRecaptchaDirective = __decorate([
        core_1.Directive({
            selector: '[ng2GoogleRecaptchaRender]',
        }), 
        __metadata('design:paramtypes', [])
    ], RenderRecaptchaDirective);
    return RenderRecaptchaDirective;
}());
exports.RenderRecaptchaDirective = RenderRecaptchaDirective;
//# sourceMappingURL=render-recaptcha.directive.js.map