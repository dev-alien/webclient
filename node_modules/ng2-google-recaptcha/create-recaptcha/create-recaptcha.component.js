"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var render_recaptcha_directive_1 = require('../render-recaptcha/render-recaptcha.directive');
var CreateRecaptchaComponent = (function () {
    function CreateRecaptchaComponent() {
        this.onCaptchaComplete = new core_1.EventEmitter();
        this.siteKey = null;
        this.captchaStyle = null;
        this.renderDelay = 500;
        this.recaptchaId = 'grecaptcha';
    }
    CreateRecaptchaComponent.prototype.ngOnInit = function () {
    };
    CreateRecaptchaComponent.prototype.resetRecaptcha = function () {
        if (this.recaptchaInstance != null) {
            this.recaptchaInstance.resetRecaptcha();
        }
    };
    CreateRecaptchaComponent.prototype.onCaptchaCompleted = function (data) {
        if (data != null) {
            this.onCaptchaComplete.emit({
                success: true,
                token: data,
                recaptcha: this,
            });
        }
        else {
            this.onCaptchaComplete.emit({
                success: false,
                token: null,
                recaptcha: this,
            });
        }
    };
    __decorate([
        core_1.Output('onCaptchaComplete'), 
        __metadata('design:type', core_1.EventEmitter)
    ], CreateRecaptchaComponent.prototype, "onCaptchaComplete", void 0);
    __decorate([
        core_1.Input('siteKey'), 
        __metadata('design:type', String)
    ], CreateRecaptchaComponent.prototype, "siteKey", void 0);
    __decorate([
        core_1.Input('captchaStyle'), 
        __metadata('design:type', Object)
    ], CreateRecaptchaComponent.prototype, "captchaStyle", void 0);
    __decorate([
        core_1.Input('renderDelay'), 
        __metadata('design:type', Number)
    ], CreateRecaptchaComponent.prototype, "renderDelay", void 0);
    __decorate([
        core_1.Input('recaptchaId'), 
        __metadata('design:type', String)
    ], CreateRecaptchaComponent.prototype, "recaptchaId", void 0);
    __decorate([
        core_1.ViewChild(render_recaptcha_directive_1.RenderRecaptchaDirective), 
        __metadata('design:type', render_recaptcha_directive_1.RenderRecaptchaDirective)
    ], CreateRecaptchaComponent.prototype, "recaptchaInstance", void 0);
    CreateRecaptchaComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'ng2-google-recaptcha',
            template: "<div id=\"{{recaptchaId}}\" ng2GoogleRecaptchaRender (onCaptchaComplete)=\"onCaptchaCompleted($event)\"\n                                                              [renderDelay]=\"renderDelay\"\n                                                              [siteKey]=\"siteKey\"\n                                                              [recaptchaId]=\"recaptchaId\"\n                                                              [captchaStyle]=\"captchaStyle\"></div>",
        }), 
        __metadata('design:paramtypes', [])
    ], CreateRecaptchaComponent);
    return CreateRecaptchaComponent;
}());
exports.CreateRecaptchaComponent = CreateRecaptchaComponent;
//# sourceMappingURL=create-recaptcha.component.js.map